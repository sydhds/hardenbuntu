# [Documentation] https://www.kernel.org/doc/html/latest/admin-guide/sysctl/kernel.html
# [Origin] /etc/sysctl.d/10-kernel-hardening.conf
#

# When an attacker is trying to exploit the local kernel, it is often
# helpful to be able to examine where in memory the kernel, modules,
# and data structures live. As such, kernel addresses should be treated
# as sensitive information.
#
# Many files and interfaces contain these addresses (e.g. /proc/kallsyms,
# /proc/modules, etc), and this setting can censor the addresses. A value
# of "0" allows all users to see the kernel addresses. A value of "1"
# limits visibility to the root user, and "2" blocks even the root user.
kernel.kptr_restrict = 2

# Access to the kernel log buffer can be especially useful for an attacker
# attempting to exploit the local kernel, as kernel addresses and detailed
# call traces are frequently found in kernel oops messages. Setting
# dmesg_restrict to "0" allows all users to view the kernel log buffer,
# and setting it to "1" restricts access to those with CAP_SYSLOG.
#
# dmesg_restrict defaults to 1 via CONFIG_SECURITY_DMESG_RESTRICT.
kernel.dmesg_restrict = 1

# bpf
# Unprivileged calls to bpf() are disabled without recovery
kernel.unprivileged_bpf_disabled=1
# TODO
net.core.bpf_jit_harden=2

# https://www.kernel.org/doc/html/latest/admin-guide/sysctl/kernel.html#sysrq
# https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
# Only enable Secure Attention Key
kernel.sysrq=4

# kexec
kernel.kexec_load_disabled=1

# namespace
kernel.unprivileged_userns_clone=0

# perf
kernel.perf_event_paranoid=3

# misc
# TODO: add doc
kernel.printk=3 3 3 3

# Restrict userfaultfd sys call to CAP_SYS_PTRACE
# TODO: doc kernel.org?
vm.unprivileged_userfaultfd=0

# Network

# TODO

# User space

# TODO: add doc
kernel.yama.ptrace_scope=2
# TODO: add doc
fs.protected_symlinks=1
fs.protected_hardlinks=1
# TODO: add doc
fs.protected_fifos=2
fs.protected_regular=2
